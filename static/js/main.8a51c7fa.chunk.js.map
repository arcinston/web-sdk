{"version":3,"sources":["lib/utils/helpers.ts","components/PeerViewport.tsx","containers/Room.tsx","App.tsx","index.tsx"],"names":["getTrack","track","stream","MediaStream","addTrack","PeerVideo","videoTrack","peerVideoTrack","useRef","useEffect","current","srcObject","ref","height","width","autoPlay","PeerScreen","screenTrack","peerScreenTrack","PeerAudio","audioTrack","peerAudioTrack","console","log","playsInline","controls","Room","history","useHistory","isBot","localStorage","getItem","useState","huddle","setHuddle","roomState","setRoomState","micState","setMicState","webcamState","setWebcamState","screenshareState","setScreenshareState","setPeers","video","audio","screen","consumerStreams","setConsumerStreams","meVideoElem","meScreenElem","joinRoomBtn","apiKey","roomId","peerId","Math","floor","random","displayName","window","config","setConfig","click","setupEventListeners","a","emitter","on","state","error","alert","peer","_peers","producer","type","videoStream","screenStream","consumer","prevState","audioStream","filter","_consumer","id","_id","joinRoom","join","leaveRoom","close","enableWebcam","disableWebcam","startScreenshare","enableShare","stopScreenshare","disableShare","enableMic","disableMic","setRoomId","setDisplayName","handleClick","className","style","backgroundColor","onClick","push","myHuddleClient","HuddleClient","value","onChange","e","target","map","idx","App","path","component","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a51c7fa.chunk.js","sourcesContent":["export const getTrack = (track: MediaStreamTrack): MediaStream => {\r\n  const stream = new MediaStream();\r\n  stream.addTrack(track);\r\n  return stream;\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const PeerVideo = ({\r\n  videoTrack,\r\n}: {\r\n  videoTrack: MediaProvider | null;\r\n}) => {\r\n  const peerVideoTrack = useRef<HTMLVideoElement>(null!);\r\n\r\n  useEffect(() => {\r\n    peerVideoTrack.current.srcObject = videoTrack;\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <video ref={peerVideoTrack} height=\"400px\" width=\"400px\" autoPlay />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PeerScreen = ({\r\n  screenTrack,\r\n}: {\r\n  screenTrack: MediaProvider | null;\r\n}) => {\r\n  const peerScreenTrack = useRef<HTMLVideoElement>(null!);\r\n\r\n  useEffect(() => {\r\n    peerScreenTrack.current.srcObject = screenTrack;\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <video ref={peerScreenTrack} height=\"400px\" width=\"400px\" autoPlay />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PeerAudio = ({\r\n  audioTrack,\r\n}: {\r\n  audioTrack: MediaProvider | null;\r\n}) => {\r\n  const peerAudioTrack = useRef<HTMLAudioElement>(null!);\r\n\r\n  useEffect(() => {\r\n    console.log(audioTrack);\r\n    peerAudioTrack.current.srcObject = audioTrack;\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <audio ref={peerAudioTrack} autoPlay playsInline controls={false} />\r\n    </div>\r\n  );\r\n};\r\n","//client sdk import\r\nimport HuddleClient, { emitter, HuddleTypes } from \"huddle01-client\";\r\n\r\n//react imports\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n//helper imports\r\nimport { getTrack } from \"../lib/utils/helpers\";\r\nimport { PeerVideo, PeerAudio, PeerScreen } from \"../components/PeerViewport\";\r\n\r\n// interfaces\r\nimport { IConsumerStreams } from \"../interface/interfaces\";\r\n\r\nfunction Room() {\r\n  const history = useHistory();\r\n  //to allow for recordings\r\n  const isBot = localStorage.getItem(\"bot_password\") === \"huddle01\";\r\n  //initialising states\r\n  const [huddle, setHuddle] = useState<HuddleClient | null>(null);\r\n  const [roomState, setRoomState] = useState<string>(\"\");\r\n  const [micState, setMicState] = useState<boolean>(false);\r\n  const [webcamState, setWebcamState] = useState<boolean>(false);\r\n  const [screenshareState, setScreenshareState] = useState<boolean>(false);\r\n\r\n  const [peers, setPeers] = useState<HuddleTypes.IPeer[]>([]);\r\n  const [consumerStreams, setConsumerStreams] = useState<IConsumerStreams>({\r\n    video: [],\r\n    audio: [],\r\n    screen: [],\r\n  });\r\n\r\n  const meVideoElem = useRef<any>(null);\r\n  const meScreenElem = useRef<any>(null);\r\n  const joinRoomBtn = useRef<any>(null);\r\n\r\n  const [config, setConfig] = useState<HuddleTypes.HuddleClientConfig>({\r\n    apiKey: \"i4pzqbpxza8vpijQMwZsP1H7nZZEH0TN3vR4NdNS\",\r\n    roomId: \"C132\",\r\n    peerId: \"Rick\" + Math.floor(Math.random() * 4000),\r\n    displayName: \"Rick Sanchez\",\r\n    window,\r\n    isBot,\r\n  });\r\n\r\n  // const config: HuddleTypes.HuddleClientConfig = {\r\n  //   apiKey: \"i4pzqbpxza8vpijQMwZsP1H7nZZEH0TN3vR4NdNS\",\r\n  //   roomId: \"C132\",\r\n  //   peerId: \"Rick\" + Math.floor(Math.random() * 4000),\r\n  //   displayName: \"Rick Sanchez\",\r\n  //   window,\r\n  //   isBot,\r\n  // };\r\n\r\n  //initialize the app\r\n\r\n  // useEffect(() => {\r\n  //   history.push(`?roomId=${config.roomId}`);\r\n\r\n  //   const myHuddleClient: HuddleClient = new HuddleClient(config);\r\n  //   setHuddle(myHuddleClient);\r\n  // }, []);\r\n  const joinroomfunc = () => {\r\n    history.push(`?roomId=${config.roomId}`);\r\n\r\n    const myHuddleClient: HuddleClient = new HuddleClient(config);\r\n    setHuddle(myHuddleClient);\r\n  };\r\n\r\n  //recording config\r\n  useEffect(() => {\r\n    //joinRoomBtn here can be whatever button/function used that calls `huddle.join()`\r\n    huddle && isBot && joinRoomBtn.current.click();\r\n  }, [huddle, isBot]);\r\n\r\n  const setupEventListeners = async () => {\r\n    emitter.on(\"roomState\", (state: string) => {\r\n      switch (state) {\r\n        case \"connected\":\r\n          //do whatever\r\n          break;\r\n        case \"failed\":\r\n          //do whatever\r\n          break;\r\n        case \"disconnected\":\r\n          //do whatever\r\n          break;\r\n        default:\r\n          setRoomState(state);\r\n          break;\r\n      }\r\n      setRoomState(state);\r\n    });\r\n\r\n    emitter.on(\"error\", (error: any) => {\r\n      alert(error);\r\n      //do whatever\r\n    });\r\n\r\n    emitter.on(\"addPeer\", (peer: HuddleTypes.IPeer) => {\r\n      console.log(\"new peer =>\", peer);\r\n      setPeers((_peers) => [..._peers, peer]);\r\n    });\r\n\r\n    emitter.on(\"addProducer\", (producer: HuddleTypes.IProducer) => {\r\n      console.log(\"new prod\", producer);\r\n      switch (producer.type) {\r\n        case \"webcam\":\r\n          const videoStream: MediaStreamTrack | null = producer.track;\r\n          if (typeof videoStream == \"object\") {\r\n            try {\r\n              if (videoStream !== null) {\r\n                meVideoElem.current.srcObject = getTrack(videoStream);\r\n              }\r\n            } catch (error: any) {\r\n              console.error(error);\r\n            }\r\n          }\r\n          break;\r\n        case \"mic\":\r\n          //do whatever\r\n          break;\r\n        case \"screen\":\r\n          const screenStream: MediaStreamTrack | null = producer.track;\r\n          if (typeof screenStream == \"object\") {\r\n            try {\r\n              if (screenStream !== null) {\r\n                meScreenElem.current.srcObject = getTrack(screenStream);\r\n              }\r\n            } catch (error: any) {\r\n              console.error(error);\r\n            }\r\n          }\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    emitter.on(\"removeProducer\", (producer: HuddleTypes.IProducer) => {\r\n      console.log(\"remove \", producer);\r\n      switch (producer.type) {\r\n        case \"webcam\":\r\n          try {\r\n            meVideoElem.current.srcObject = null;\r\n          } catch (error: any) {\r\n            console.error(error);\r\n          }\r\n          break;\r\n        case \"mic\":\r\n          //do whatever\r\n          break;\r\n        case \"screen\":\r\n          try {\r\n            meScreenElem.current.srcObject = null;\r\n          } catch (error: any) {\r\n            console.error(error);\r\n          }\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    emitter.on(\"addConsumer\", (consumer: HuddleTypes.IConsumer) => {\r\n      switch (consumer.type) {\r\n        case \"webcam\": {\r\n          const videoStream = consumer.track;\r\n          setConsumerStreams((prevState) => ({\r\n            ...prevState,\r\n            video: [...prevState.video, videoStream],\r\n          }));\r\n\r\n          break;\r\n        }\r\n\r\n        case \"screen\": {\r\n          const screenStream = consumer.track;\r\n          setConsumerStreams((prevState) => ({\r\n            ...prevState,\r\n            screen: [...prevState.screen, screenStream],\r\n          }));\r\n          break;\r\n        }\r\n\r\n        case \"mic\": {\r\n          const audioStream = consumer.track;\r\n          setConsumerStreams((prevState) => ({\r\n            ...prevState,\r\n            audio: [...prevState.audio, audioStream],\r\n          }));\r\n\r\n          break;\r\n        }\r\n\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    emitter.on(\"removeConsumer\", (consumer: any) => {\r\n      switch (consumer.type) {\r\n        case \"screen\":\r\n          setConsumerStreams((prevState) => {\r\n            return {\r\n              ...prevState,\r\n              screen: prevState.screen.filter(\r\n                (_consumer) => _consumer.id !== consumer._id\r\n              ),\r\n            };\r\n          });\r\n          break;\r\n        case \"webcam\":\r\n          setConsumerStreams((prevState) => {\r\n            return {\r\n              ...prevState,\r\n              video: prevState.video.filter(\r\n                (_consumer) => _consumer.id !== consumer._id\r\n              ),\r\n            };\r\n          });\r\n          break;\r\n        case \"mic\":\r\n          setConsumerStreams((prevState) => {\r\n            return {\r\n              ...prevState,\r\n              audio: prevState.audio.filter(\r\n                (_consumer) => _consumer.id !== consumer._id\r\n              ),\r\n            };\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  };\r\n\r\n  const joinRoom = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      setupEventListeners();\r\n      await huddle.join();\r\n    } catch (error: any) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const leaveRoom = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      await huddle.close();\r\n      setRoomState(\"\");\r\n    } catch (error: any) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  //TODO: add pauseWebcam() and resumeWebcam()\r\n  const enableWebcam = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      await huddle.enableWebcam();\r\n      setWebcamState(true);\r\n    } catch (error: any) {\r\n      setWebcamState(false);\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const disableWebcam = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      await huddle.disableWebcam();\r\n      setWebcamState(false);\r\n    } catch (error: any) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const startScreenshare = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      await huddle.enableShare();\r\n      setScreenshareState(true);\r\n    } catch (error: any) {\r\n      alert(error);\r\n      setScreenshareState(false);\r\n    }\r\n  };\r\n\r\n  const stopScreenshare = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      await huddle.disableShare();\r\n      setScreenshareState(false);\r\n    } catch (error: any) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  //TODO: add muteMic() and unmuteMic()\r\n  const enableMic = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      huddle.enableMic();\r\n      setMicState(true);\r\n    } catch (error: any) {\r\n      setMicState(false);\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const disableMic = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      huddle.disableMic();\r\n      setMicState(false);\r\n    } catch (error: any) {\r\n      alert(error);\r\n      setMicState(true);\r\n    }\r\n  };\r\n\r\n  const startRecording = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      const status: boolean = await huddle.startRecording();\r\n      if (status) console.log(\"recording successfully initiated\");\r\n    } catch (error: any) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const stopRecorder = async () => {\r\n    if (!huddle) return;\r\n    try {\r\n      const status: boolean = await huddle.stopRecording();\r\n      if (status) console.log(\"recording successfully stopped\");\r\n    } catch (error: any) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  const [roomId, setRoomId] = useState(\"\");\r\n  const [displayName, setDisplayName] = useState(\"\");\r\n  const handleClick = () => {\r\n    setConfig((config) => ({\r\n      ...config,\r\n      displayName: displayName,\r\n      roomId: roomId,\r\n      peerId: displayName + Math.floor(Math.random() * 4000),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={{ backgroundColor: \"#ff4d4d\" }}>\r\n      <div className=\"me-ports\">\r\n        <video height=\"400px\" width=\"400px\" autoPlay ref={meVideoElem} />\r\n        <video height=\"400px\" width=\"400px\" autoPlay ref={meScreenElem} />\r\n      </div>\r\n      <div>\r\n        <button id=\"initialize-btn\" onClick={joinroomfunc}>\r\n          Initialize\r\n        </button>\r\n        <input\r\n          id=\"room-id\"\r\n          value={roomId}\r\n          onChange={(e) => {\r\n            setRoomId(e.target.value);\r\n          }}\r\n        />\r\n        <button\r\n          id=\"setNameBtn\"\r\n          onClick={() => {\r\n            handleClick();\r\n          }}\r\n        >\r\n          Set Room Id\r\n        </button>\r\n        <input\r\n          id=\"display-name\"\r\n          value={displayName}\r\n          onChange={(e) => {\r\n            setDisplayName(e.target.value);\r\n          }}\r\n        />\r\n        <button\r\n          id=\"setNameBtn\"\r\n          onClick={() => {\r\n            handleClick();\r\n          }}\r\n        >\r\n          Set Name\r\n        </button>\r\n      </div>\r\n      <div className=\"btn-grp\">\r\n        <button\r\n          ref={joinRoomBtn}\r\n          id=\"join-btn\"\r\n          onClick={roomState === \"connected\" ? leaveRoom : joinRoom}\r\n        >\r\n          {roomState === \"connected\" ? \"Leave Room\" : \"Join Room\"}\r\n        </button>\r\n        <button onClick={webcamState ? disableWebcam : enableWebcam}>\r\n          {webcamState ? \"Disable Webcam\" : \"Enable Webcam\"}\r\n        </button>\r\n        <button onClick={micState ? disableMic : enableMic}>\r\n          {micState ? \"Disable Mic\" : \"Enable Mic\"}\r\n        </button>\r\n        <button onClick={screenshareState ? stopScreenshare : startScreenshare}>\r\n          {screenshareState ? \"Disable Screenshare\" : \"Enable Screenshare\"}\r\n        </button>\r\n        {/* <button onClick={toggleWebcam}>Toggle Webcam</button> */}\r\n      </div>\r\n\r\n      <div className=\"peer-ports\">\r\n        {consumerStreams.video.map((stream, idx) => {\r\n          return <PeerVideo key={idx} videoTrack={getTrack(stream)} />;\r\n        })}\r\n        {consumerStreams.screen.map((stream, idx) => {\r\n          return <PeerScreen key={idx} screenTrack={getTrack(stream)} />;\r\n        })}\r\n        {consumerStreams.audio.map((stream, idx) => {\r\n          return <PeerAudio key={idx} audioTrack={getTrack(stream)} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Room;\r\n","import {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Room from \"./containers/Room\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/room\" component={Room} />\r\n        <Route path=\"/\" component={() => <Redirect to=\"/room\" />} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}